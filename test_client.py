#!/usr/bin/python
import sys
import socket
import tpro.proto.signalling
import tpro.proto.parser
import tpro.qraw.qraw
import tpro.proto.media
## For sleep
import time
#import qik.db.schema

sig     = tpro.proto.signalling
parser  = tpro.proto.parser
qraw    = tpro.qraw.qraw
media   = tpro.proto.media
#db      = qik.db


class EdgeClient(object):
  def __init__(self, host, port = 11528, device_id="0eaadaacd47901fabefee1d7fbd4062b"):
    self.device_id = device_id
    self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    self.socket.connect((host, port))
    self.parser = parser.Parser()

  def done(self):
    self.socket.close()

  def sendSessionStart(self, device_id, platform = "100", version = "0.0.1"):
    packet = sig.SessionStartPacket(device_id, refId = 0, platform = platform, version = version)
    self.socket.send(packet.getBytes())
    pass

  def sendSessionStop(self):
    packet = sig.SessionEndPacket()
    self.socket.send(packet.getBytes())


  def sendStreamStart(self, uuid = None, qraw_header = None):
    if None == qraw_header:
      packet = sig.StreamStartPacket(uuid = uuid)
    else:
      packet = sig.StreamStartPacket(uuid     = uuid,
                                     vcodec   = qraw_header.video_codec,
                                     width    = qraw_header.video_weight,
                                     height   = qraw_header.video_height,
                                     vc_num   = qraw_header.video_clock_num,
                                     vc_denum = qraw_header.video_clock_denum,
                                     acodec   = qraw_header.audio_codec,
                                     ac_num   = qraw_header.audio_clock_num,
                                     ac_denum = qraw_header.audio_clock_denum)

    self.socket.send(packet.getBytes())
    pass

  def sendStreamStop(self):
    packet = sig.StreamStopPacket()
    self.socket.send(packet.getBytes())
  
  def sendFakedStreamStop(self):
    packet = sig.StreamFakedStopPacket()
    self.socket.send(packet.getBytes())
  
  def recvPacket(self):
    data = self.socket.recv(4096)
    self.parser.push(data)
    return self.parser.getPacket()

  def startSession(self):
    self.sendSessionStart(self.device_id)
    packet = self.recvPacket()
    uuid = None
    if packet.opcode == sig.OPCODE_RES_OK:
      for el in packet.elements:
        if el.type=='BYTE16' and el.name == sig.ELEMENT_SESSION_UUID:
          uuid = '%016x%016x' % el.value
          break
    return uuid

  def stopSession(self):
    self.sendSessionStop()
  
  
  def stopFakedSession(self):
    self.sendFakedStreamStop()
  
  
  def startStream(self, uuid = None, qraw_header = None):
    self.sendStreamStart(uuid        = uuid,
                         qraw_header = qraw_header)
    packet = self.recvPacket()
    uuid = None
    if packet.opcode == sig.OPCODE_RES_OK:
      for el in packet.elements:
        if el.type=='BYTE16' and el.name == sig.ELEMENT_STREAM_UUID:
          uuid = '%016x%016x' % el.value
          break
    return uuid

  def stopStream(self):
    self.sendSessionStop()
    packet = self.recvPacket()
    if None != packet:
      return packet.opcode == sig.OPCODE_RES_OK
    else:
      return False

  def sendMediaPacket(self, qraw_packet):
    packet = media.MediaPacket(opcode     = qraw_packet.opcode,
                               timestamp  = qraw_packet.timestamp,
                               payload    = qraw_packet.payload,
                               ref_id     = qraw_packet.ref_id)
    self.socket.send(packet.getBytes())
    pass
  
  def sendDummyPacket():
    log_packet =  [ 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x00, 0x00, 0x00, 0x0C, 0x10, 0x00, 0x00, 0x01, 0x00, 0x20, 0x23,
                  0x31, 0x34, 0x2C, 0x20, 0x4E, 0x65, 0x69, 0x6A, 0x69, 0x6E, 0x67, 0x3A, 0x20, 0x3C, 0x4C, 0x41, 0x4E, 0x53, 0x65,
                  0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72, 0x76, 0x20, 0x35, 0x20, 0x3C, 0x34, 0x3E, 0x0D, 0x0A, 0x31, 0x37,
                  0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x23, 0x31, 0x35, 0x2C, 0x20, 0x6E, 0x65, 0x77, 0x3A, 0x20, 0x3C, 0x4C,
                  0x41, 0x4E, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72, 0x76, 0x20, 0x36, 0x20, 0x3C, 0x34, 0x3E,
                  0x0D, 0x0A, 0x31, 0x37, 0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x23, 0x31, 0x36, 0x2C, 0x20, 0x46, 0x52, 0x45,
                  0x49, 0x52, 0x45, 0x3A, 0x20, 0x3C, 0x4C, 0x41, 0x4E, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72,
                  0x76, 0x20, 0x37, 0x20, 0x3C, 0x34, 0x3E, 0x0D, 0x0A, 0x31, 0x37, 0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x23,
                  0x31, 0x37, 0x2C, 0x20, 0x49, 0x67, 0x75, 0x61, 0x6E, 0x61, 0x3A, 0x20, 0x3C, 0x4C, 0x41, 0x4E, 0x53, 0x65, 0x72,
                  0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72, 0x76, 0x20, 0x38, 0x20, 0x3C, 0x34, 0x3E, 0x0D, 0x0A, 0x31, 0x37, 0x3A,
                  0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x23, 0x31, 0x38, 0x2C, 0x20, 0x43, 0x6F, 0x6E, 0x65, 0x78, 0xE3, 0x6F, 0x3A,
                  0x20, 0x3C, 0x4C, 0x41, 0x4E, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72, 0x76, 0x20, 0x39, 0x20,
                  0x3C, 0x34, 0x3E, 0x0D, 0x0A, 0x31, 0x37, 0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x56, 0x69, 0x64, 0x65, 0x6F,
                  0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x3A, 0x3A, 0x53, 0x74, 0x61, 0x72, 0x74, 0x0D, 0x0A, 0x31, 0x37,
                  0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20]
    log_packet1 =  [ 0x00, 0xFF, 0xFF, 0xAA, 0xAA, 0xAA, 0x90, 0x00, 0xFF, 0xFF, 0xFF, 0x0CFFFF, 0x10, 0x00, 0x00, 0x01, 0x00, 0x20, 0x23,
                  0x31, 0x34, 0x2C, 0x20, 0x4E, 0x60, 0x69, 0x6A, 0x69, 0x6E, 0x67, 0x3A, 0x20, 0x3C, 0x4C, 0x41, 0x4E, 0x53, 0x65,
                  0x72, 0x7F, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72, 0x76, 0x20, 0x35, 0x20, 0x3C, 0x34, 0x3E, 0x0D, 0x0A, 0x31, 0x37,
                  0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x23, 0x31, 0x35, 0x2C, 0x20, 0x6E, 0x65, 0x77, 0x3A, 0x20, 0x3C, 0x4C,
                  0x41, 0x4E, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x73, 0x76, 0x20, 0x36, 0x20, 0x3C, 0x34, 0x3E,
                  0x0D, 0x0A, 0x31, 0x37, 0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x23, 0x31, 0x36, 0x2C, 0x20, 0x46, 0x52, 0x45,
                  0x49, 0x52, 0x45, 0x3A, 0x20, 0x3C, 0x4C, 0x41, 0xFE, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72,
                  0x76, 0x20, 0x37, 0x20, 0x3C, 0x11, 0x3E, 0x0D, 0x0A, 0x31, 0x37, 0x3A, 0x32, 0xFF, 0x3A, 0x32, 0x33, 0x20, 0x23,
                  0x31, 0x37, 0x2C, 0x20, 0x49, 0x67, 0x75, 0x61, 0x6E, 0x61, 0x3A, 0x20, 0x3C, 0x4C, 0x41, 0x4E, 0x53, 0x65, 0x72,
                  0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72, 0x76, 0x20, 0x38, 0x20, 0x3C, 0x34, 0x3E, 0x0D, 0x0A, 0x31, 0x37, 0x3A,
                  0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x23, 0x43, 0x38, 0x2C, 0x20, 0x43, 0x6F, 0x6E, 0x65, 0x78, 0xE3, 0x6F, 0x3A,
                  0x20, 0x3C, 0x4C, 0x41, 0x4E, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x73, 0x72, 0x76, 0x20, 0x39, 0x20,
                  0x3C, 0x34, 0x3E, 0x0D, 0x0A, 0x31, 0x37, 0x3A, 0x32, 0x39, 0x3A, 0x32, 0x33, 0x20, 0x56, 0x69, 0x64, 0x65, 0x6F,
                  0x52, 0x65, 0x63, 0x6F, 0x72, 0x64, 0x65, 0x72, 0x3A, 0x3A, 0x53, 0x74, 0x61, 0x72, 0x74, 0x0D, 0x0A, 0x31, 0x37,
                  0x3A, 0x02, 0x39, 0x3A, 0x32, 0x33, 0x20]
    log_packet2 = [ 0xFFFFFFFF,  0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF ]
    qqqstr = ''
    for j in log_packet2:
      qqqstr = qqqstr + chr(j)
      client.socket.sendall(packet)
      #print len(qqqstr)
      client.socket.sendall(qqqstr)
    pass
  
def main(args):
#  print "Args: %d:"%(len(args)) + " and they're "+ sys.argv[0] + " " + sys.argv[1] + " " + sys.argv[2]
  if len(args) < 2:
    print "Not enough args!"  
    return 1
  try:
    test  = sys.argv[2]
  except:
    test = 0
  try:
    fileid=sys.argv[3]
  except:
    fileid='/tmp/test_client_streamid'
#  db.schema.initDbSchema("192.168.2.2")
#  session = db.schema.getDbSession()
#  Stream = db.schema.Stream

#  streams = session.query(Stream).all()
  sizesum=0;
  mpackets=0;
  reader = qraw.FileReader(args[1])
  main_header = reader.GetMainHeader()
  client = EdgeClient("192.168.2.4", device_id = "b"*32)
  session_uuid = client.startSession()
  f = open(fileid, 'w')
  s="Session UUID: %s\n" % session_uuid
  f.write(s)
  print "====================================================";
  print "Session UUID: ", session_uuid
  
  
  if None != session_uuid:
    stream_uuid = client.startStream(qraw_header = main_header)
    print "Stream UUID: ", stream_uuid
    s="Stream UUID: %s\n" % stream_uuid
    f.write(s)
    f.close()
    packet = reader.ReadNextPacket()
    start = time.time()
    while None != packet:
      ## Conditions for stopping streaming
      if test == "1":
        if mpackets == 300:
          print "%d secs gone, packet number %d sent, sleep 20 sec"%((time.time() - start), mpackets)
          time.sleep(10)
#        if mpackets == 400:
#          for i in range(1, 2500000):
#            client.sendDummyPacket
#          print "Sent dummy packet"
#        client.stopStream()
          print "End of dummy packets"
#          client.stopStream()
#          client.done()
          pass
#        return
#        pass
#        print "Send dummy packet on packet %d"%(mpackets)
        
#        print "Packet sent. sleep 10 sec"
#        time.sleep(10)
#        return 0
      
      #End for conditions
      client.sendMediaPacket(packet)
      ## Count packets
      mpackets=mpackets+1
#      print "sent size: " + str(len(packet.payload))
      ## Summarize the packets payload
      sizesum=sizesum+len(packet.payload)
      packet = reader.ReadNextPacket()
    client.stopStream()
#  client.stopSession()
    client.stopFakedSession()
  print "Sent %d packets, summary %d bytes"%(mpackets,sizesum)
  print "====================================================";
  client.done()
  pass


if __name__ == '__main__':
  main(sys.argv)
